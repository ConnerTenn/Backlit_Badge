
BacklitBadge03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000928  000009bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000928  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800104  00800104  000009c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3c  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000818  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f6  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056b  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000543  00000000  00000000  00002dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000333e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	c1 c3       	rjmp	.+1922   	; 0x78e <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	95 c3       	rjmp	.+1834   	; 0x744 <__vector_12>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 e2       	ldi	r30, 0x28	; 40
  48:	f9 e0       	ldi	r31, 0x09	; 9
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 30       	cpi	r26, 0x04	; 4
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a4 e0       	ldi	r26, 0x04	; 4
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a3 37       	cpi	r26, 0x73	; 115
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	d5 d3       	rcall	.+1962   	; 0x812 <main>
  68:	5d c4       	rjmp	.+2234   	; 0x924 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <_Z4Randv>:

uint16_t lfsr = 0xACE1u;
uint16_t bit = 0;

uint16_t Rand()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

	bit = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 5)) & 1;
  74:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lfsr>
  78:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lfsr+0x1>
  7c:	9c 01       	movw	r18, r24
  7e:	36 95       	lsr	r19
  80:	27 95       	ror	r18
  82:	36 95       	lsr	r19
  84:	27 95       	ror	r18
  86:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lfsr>
  8a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lfsr+0x1>
  8e:	28 27       	eor	r18, r24
  90:	39 27       	eor	r19, r25
  92:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lfsr>
  96:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lfsr+0x1>
  9a:	96 95       	lsr	r25
  9c:	87 95       	ror	r24
  9e:	96 95       	lsr	r25
  a0:	87 95       	ror	r24
  a2:	96 95       	lsr	r25
  a4:	87 95       	ror	r24
  a6:	28 27       	eor	r18, r24
  a8:	39 27       	eor	r19, r25
  aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lfsr>
  ae:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lfsr+0x1>
  b2:	96 95       	lsr	r25
  b4:	87 95       	ror	r24
  b6:	92 95       	swap	r25
  b8:	82 95       	swap	r24
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	89 27       	eor	r24, r25
  be:	9f 70       	andi	r25, 0x0F	; 15
  c0:	89 27       	eor	r24, r25
  c2:	82 27       	eor	r24, r18
  c4:	93 27       	eor	r25, r19
  c6:	81 70       	andi	r24, 0x01	; 1
  c8:	99 27       	eor	r25, r25
  ca:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <bit+0x1>
  ce:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <bit>
	return lfsr = (lfsr >> 1) | (bit << 15);
  d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lfsr>
  d6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lfsr+0x1>
  da:	9c 01       	movw	r18, r24
  dc:	36 95       	lsr	r19
  de:	27 95       	ror	r18
  e0:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <bit>
  e4:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <bit+0x1>
  e8:	99 27       	eor	r25, r25
  ea:	86 95       	lsr	r24
  ec:	97 95       	ror	r25
  ee:	88 27       	eor	r24, r24
  f0:	82 2b       	or	r24, r18
  f2:	93 2b       	or	r25, r19
  f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <lfsr+0x1>
  f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lfsr>
  fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lfsr>
 100:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lfsr+0x1>
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <_Z8ValueToRh>:




inline u8 ValueToR(u8 val)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	1f 92       	push	r1
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	89 83       	std	Y+1, r24	; 0x01
	//return (val <= 85 ? 255 - val * 3 : 0) + //First Decrease
	//(val > 170 ? val * 3 : 0); //Third Increase
	return ((val <= 85) ? (255 - val * 3) : (val > 170 ? val * 3 : 0));
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	86 35       	cpi	r24, 0x56	; 86
 11a:	48 f4       	brcc	.+18     	; 0x12e <_Z8ValueToRh+0x24>
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	98 2f       	mov	r25, r24
 120:	88 0f       	add	r24, r24
 122:	88 0f       	add	r24, r24
 124:	29 2f       	mov	r18, r25
 126:	28 1b       	sub	r18, r24
 128:	82 2f       	mov	r24, r18
 12a:	81 50       	subi	r24, 0x01	; 1
 12c:	09 c0       	rjmp	.+18     	; 0x140 <_Z8ValueToRh+0x36>
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	8b 3a       	cpi	r24, 0xAB	; 171
 132:	28 f0       	brcs	.+10     	; 0x13e <_Z8ValueToRh+0x34>
 134:	99 81       	ldd	r25, Y+1	; 0x01
 136:	89 2f       	mov	r24, r25
 138:	88 0f       	add	r24, r24
 13a:	89 0f       	add	r24, r25
 13c:	01 c0       	rjmp	.+2      	; 0x140 <_Z8ValueToRh+0x36>
 13e:	80 e0       	ldi	r24, 0x00	; 0
}
 140:	0f 90       	pop	r0
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <_Z8ValueToGh>:
inline u8 ValueToG(u8 val)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	1f 92       	push	r1
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	89 83       	std	Y+1, r24	; 0x01
	//return (val <= 85 ? val * 3 : 0) +//First Increase
	//(val >= 85 && val < 170 ? 255 - val * 3 : 0);//Second Increase
	return (val <= 85 ? val * 3 : (val < 170 ? 255 - val * 3 : 0));
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	86 35       	cpi	r24, 0x56	; 86
 158:	28 f4       	brcc	.+10     	; 0x164 <_Z8ValueToGh+0x1c>
 15a:	99 81       	ldd	r25, Y+1	; 0x01
 15c:	89 2f       	mov	r24, r25
 15e:	88 0f       	add	r24, r24
 160:	89 0f       	add	r24, r25
 162:	0d c0       	rjmp	.+26     	; 0x17e <_Z8ValueToGh+0x36>
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	8a 3a       	cpi	r24, 0xAA	; 170
 168:	48 f4       	brcc	.+18     	; 0x17c <_Z8ValueToGh+0x34>
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	98 2f       	mov	r25, r24
 16e:	88 0f       	add	r24, r24
 170:	88 0f       	add	r24, r24
 172:	29 2f       	mov	r18, r25
 174:	28 1b       	sub	r18, r24
 176:	82 2f       	mov	r24, r18
 178:	81 50       	subi	r24, 0x01	; 1
 17a:	01 c0       	rjmp	.+2      	; 0x17e <_Z8ValueToGh+0x36>
 17c:	80 e0       	ldi	r24, 0x00	; 0
}
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <_Z8ValueToBh>:
inline u8 ValueToB(u8 val)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	1f 92       	push	r1
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	89 83       	std	Y+1, r24	; 0x01
	//return (val > 85 && val <= 170 ? val * 3 : 0) +//Second Increase
	//(val >= 170 ? 255 - val * 3 : 0);//Third Decrease
	//return (val > 85 && val <= 170 ? val * 3 : (val >= 170 ? 255 - val * 3 : 0));
	return (val > 170 ? 255 - val * 3 : (val > 85 ? val * 3 : 0));
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	8b 3a       	cpi	r24, 0xAB	; 171
 196:	48 f0       	brcs	.+18     	; 0x1aa <_Z8ValueToBh+0x24>
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	98 2f       	mov	r25, r24
 19c:	88 0f       	add	r24, r24
 19e:	88 0f       	add	r24, r24
 1a0:	29 2f       	mov	r18, r25
 1a2:	28 1b       	sub	r18, r24
 1a4:	82 2f       	mov	r24, r18
 1a6:	81 50       	subi	r24, 0x01	; 1
 1a8:	09 c0       	rjmp	.+18     	; 0x1bc <_Z8ValueToBh+0x36>
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	86 35       	cpi	r24, 0x56	; 86
 1ae:	28 f0       	brcs	.+10     	; 0x1ba <_Z8ValueToBh+0x34>
 1b0:	99 81       	ldd	r25, Y+1	; 0x01
 1b2:	89 2f       	mov	r24, r25
 1b4:	88 0f       	add	r24, r24
 1b6:	89 0f       	add	r24, r25
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <_Z8ValueToBh+0x36>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
}
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <_Z9Display2Yhhhh>:
	Lume+=256/16;
}

//xc: x current		xn: x next		yc: y & colour combined
inline void Display2Y(const u8 xc, const u8 xn, const u8 yc, const u8 lume)
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <_Z9Display2Yhhhh+0x6>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <_Z9Display2Yhhhh+0x8>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	89 83       	std	Y+1, r24	; 0x01
 1d2:	6a 83       	std	Y+2, r22	; 0x02
 1d4:	4b 83       	std	Y+3, r20	; 0x03
 1d6:	2c 83       	std	Y+4, r18	; 0x04
	PORTA = CLK | (PORTA = (COLS ^ (COL0 << xc)) | (LED[xn][0][yc] >= lume ? SERIAL : 0x00));//activate serial, then activate clock
 1d8:	42 e2       	ldi	r20, 0x22	; 34
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	62 e2       	ldi	r22, 0x22	; 34
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	80 e1       	ldi	r24, 0x10	; 16
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <_Z9Display2Yhhhh+0x2c>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	2a 95       	dec	r18
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <_Z9Display2Yhhhh+0x28>
 1f4:	98 2f       	mov	r25, r24
 1f6:	80 ef       	ldi	r24, 0xF0	; 240
 1f8:	a9 2f       	mov	r26, r25
 1fa:	a8 27       	eor	r26, r24
 1fc:	8a 81       	ldd	r24, Y+2	; 0x02
 1fe:	28 2f       	mov	r18, r24
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	e8 2f       	mov	r30, r24
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	c9 01       	movw	r24, r18
 20a:	82 95       	swap	r24
 20c:	92 95       	swap	r25
 20e:	90 7f       	andi	r25, 0xF0	; 240
 210:	98 27       	eor	r25, r24
 212:	80 7f       	andi	r24, 0xF0	; 240
 214:	98 27       	eor	r25, r24
 216:	82 1b       	sub	r24, r18
 218:	93 0b       	sbc	r25, r19
 21a:	8e 0f       	add	r24, r30
 21c:	9f 1f       	adc	r25, r31
 21e:	87 5f       	subi	r24, 0xF7	; 247
 220:	9e 4f       	sbci	r25, 0xFE	; 254
 222:	fc 01       	movw	r30, r24
 224:	90 81       	ld	r25, Z
 226:	8c 81       	ldd	r24, Y+4	; 0x04
 228:	98 17       	cp	r25, r24
 22a:	10 f0       	brcs	.+4      	; 0x230 <_Z9Display2Yhhhh+0x6c>
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	01 c0       	rjmp	.+2      	; 0x232 <_Z9Display2Yhhhh+0x6e>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	8a 2b       	or	r24, r26
 234:	fb 01       	movw	r30, r22
 236:	80 83       	st	Z, r24
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	fa 01       	movw	r30, r20
 23c:	80 83       	st	Z, r24
}
 23e:	00 00       	nop
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <_Z9Display2Xhhh>:

inline void Display2X(const u8 xc, const u8 xn, const u8 lume)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	00 d0       	rcall	.+0      	; 0x254 <_Z9Display2Xhhh+0x6>
 254:	1f 92       	push	r1
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	89 83       	std	Y+1, r24	; 0x01
 25c:	6a 83       	std	Y+2, r22	; 0x02
 25e:	4b 83       	std	Y+3, r20	; 0x03
	PORTA = (COLS ^ (COL0 << xc)) | CLK;
 260:	82 e2       	ldi	r24, 0x22	; 34
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	29 81       	ldd	r18, Y+1	; 0x01
 266:	42 2f       	mov	r20, r18
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	20 e1       	ldi	r18, 0x10	; 16
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <_Z9Display2Xhhh+0x26>
 270:	22 0f       	add	r18, r18
 272:	33 1f       	adc	r19, r19
 274:	4a 95       	dec	r20
 276:	e2 f7       	brpl	.-8      	; 0x270 <_Z9Display2Xhhh+0x22>
 278:	32 2f       	mov	r19, r18
 27a:	20 ef       	ldi	r18, 0xF0	; 240
 27c:	23 27       	eor	r18, r19
 27e:	21 60       	ori	r18, 0x01	; 1
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
	
	
	Display2Y(xc, xn, 14, lume);
 284:	2b 81       	ldd	r18, Y+3	; 0x03
 286:	4e e0       	ldi	r20, 0x0E	; 14
 288:	6a 81       	ldd	r22, Y+2	; 0x02
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	9b df       	rcall	.-202    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 13, lume);
 28e:	2b 81       	ldd	r18, Y+3	; 0x03
 290:	4d e0       	ldi	r20, 0x0D	; 13
 292:	6a 81       	ldd	r22, Y+2	; 0x02
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	96 df       	rcall	.-212    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 12, lume);
 298:	2b 81       	ldd	r18, Y+3	; 0x03
 29a:	4c e0       	ldi	r20, 0x0C	; 12
 29c:	6a 81       	ldd	r22, Y+2	; 0x02
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	91 df       	rcall	.-222    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 11, lume);
 2a2:	2b 81       	ldd	r18, Y+3	; 0x03
 2a4:	4b e0       	ldi	r20, 0x0B	; 11
 2a6:	6a 81       	ldd	r22, Y+2	; 0x02
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	8c df       	rcall	.-232    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 10, lume);
 2ac:	2b 81       	ldd	r18, Y+3	; 0x03
 2ae:	4a e0       	ldi	r20, 0x0A	; 10
 2b0:	6a 81       	ldd	r22, Y+2	; 0x02
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	87 df       	rcall	.-242    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 9, lume);
 2b6:	2b 81       	ldd	r18, Y+3	; 0x03
 2b8:	49 e0       	ldi	r20, 0x09	; 9
 2ba:	6a 81       	ldd	r22, Y+2	; 0x02
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	82 df       	rcall	.-252    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 8, lume);
 2c0:	2b 81       	ldd	r18, Y+3	; 0x03
 2c2:	48 e0       	ldi	r20, 0x08	; 8
 2c4:	6a 81       	ldd	r22, Y+2	; 0x02
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	7d df       	rcall	.-262    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 7, lume);
 2ca:	2b 81       	ldd	r18, Y+3	; 0x03
 2cc:	47 e0       	ldi	r20, 0x07	; 7
 2ce:	6a 81       	ldd	r22, Y+2	; 0x02
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	78 df       	rcall	.-272    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 6, lume);
 2d4:	2b 81       	ldd	r18, Y+3	; 0x03
 2d6:	46 e0       	ldi	r20, 0x06	; 6
 2d8:	6a 81       	ldd	r22, Y+2	; 0x02
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	73 df       	rcall	.-282    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 5, lume);
 2de:	2b 81       	ldd	r18, Y+3	; 0x03
 2e0:	45 e0       	ldi	r20, 0x05	; 5
 2e2:	6a 81       	ldd	r22, Y+2	; 0x02
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	6e df       	rcall	.-292    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 4, lume);
 2e8:	2b 81       	ldd	r18, Y+3	; 0x03
 2ea:	44 e0       	ldi	r20, 0x04	; 4
 2ec:	6a 81       	ldd	r22, Y+2	; 0x02
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	69 df       	rcall	.-302    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 3, lume);
 2f2:	2b 81       	ldd	r18, Y+3	; 0x03
 2f4:	43 e0       	ldi	r20, 0x03	; 3
 2f6:	6a 81       	ldd	r22, Y+2	; 0x02
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	64 df       	rcall	.-312    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 2, lume);
 2fc:	2b 81       	ldd	r18, Y+3	; 0x03
 2fe:	42 e0       	ldi	r20, 0x02	; 2
 300:	6a 81       	ldd	r22, Y+2	; 0x02
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	5f df       	rcall	.-322    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 1, lume);
 306:	2b 81       	ldd	r18, Y+3	; 0x03
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	6a 81       	ldd	r22, Y+2	; 0x02
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	5a df       	rcall	.-332    	; 0x1c4 <_Z9Display2Yhhhh>
	Display2Y(xc, xn, 0, lume);
 310:	2b 81       	ldd	r18, Y+3	; 0x03
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	6a 81       	ldd	r22, Y+2	; 0x02
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	55 df       	rcall	.-342    	; 0x1c4 <_Z9Display2Yhhhh>
	
	PORTA = COLS | NLA | NEN;
 31a:	82 e2       	ldi	r24, 0x22	; 34
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	2c ef       	ldi	r18, 0xFC	; 252
 320:	fc 01       	movw	r30, r24
 322:	20 83       	st	Z, r18
	PORTA = COLS ^ (COL0 << xn);
 324:	82 e2       	ldi	r24, 0x22	; 34
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	2a 81       	ldd	r18, Y+2	; 0x02
 32a:	42 2f       	mov	r20, r18
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	20 e1       	ldi	r18, 0x10	; 16
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <__stack+0x39>
 334:	22 0f       	add	r18, r18
 336:	33 1f       	adc	r19, r19
 338:	4a 95       	dec	r20
 33a:	e2 f7       	brpl	.-8      	; 0x334 <__stack+0x35>
 33c:	32 2f       	mov	r19, r18
 33e:	20 ef       	ldi	r18, 0xF0	; 240
 340:	23 27       	eor	r18, r19
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
}
 346:	00 00       	nop
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <_Z8Display2v>:

__attribute__((optimize("unroll-loops")))
inline void Display2()
{
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	1f 92       	push	r1
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
	for (u8 lume = 0; lume < 250; lume += 13)
 35e:	19 82       	std	Y+1, r1	; 0x01
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	8a 3f       	cpi	r24, 0xFA	; 250
 364:	a0 f4       	brcc	.+40     	; 0x38e <_Z8Display2v+0x3a>
	{
		Display2X(3, 0, lume);
 366:	49 81       	ldd	r20, Y+1	; 0x01
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	70 df       	rcall	.-288    	; 0x24e <_Z9Display2Xhhh>
		Display2X(0, 1, lume);
 36e:	49 81       	ldd	r20, Y+1	; 0x01
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	6c df       	rcall	.-296    	; 0x24e <_Z9Display2Xhhh>
		Display2X(1, 2, lume);
 376:	49 81       	ldd	r20, Y+1	; 0x01
 378:	62 e0       	ldi	r22, 0x02	; 2
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	68 df       	rcall	.-304    	; 0x24e <_Z9Display2Xhhh>
		Display2X(2, 3, lume);
 37e:	49 81       	ldd	r20, Y+1	; 0x01
 380:	63 e0       	ldi	r22, 0x03	; 3
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	64 df       	rcall	.-312    	; 0x24e <_Z9Display2Xhhh>
}

__attribute__((optimize("unroll-loops")))
inline void Display2()
{
	for (u8 lume = 0; lume < 250; lume += 13)
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	83 5f       	subi	r24, 0xF3	; 243
 38a:	89 83       	std	Y+1, r24	; 0x01
 38c:	e9 cf       	rjmp	.-46     	; 0x360 <_Z8Display2v+0xc>
		Display2X(0, 1, lume);
		Display2X(1, 2, lume);
		Display2X(2, 3, lume);
	}
	
	PORTA = COLS;
 38e:	82 e2       	ldi	r24, 0x22	; 34
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	20 ef       	ldi	r18, 0xF0	; 240
 394:	fc 01       	movw	r30, r24
 396:	20 83       	st	Z, r18
}
 398:	00 00       	nop
 39a:	0f 90       	pop	r0
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <_Z9Display2Yh>:

inline void Display2Y(const u8 c)
{
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	1f 92       	push	r1
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	89 83       	std	Y+1, r24	; 0x01
	//remove this loop
	PORTA = CLK | (PORTA = COLS | (FRGB & c ? SERIAL : 0x00));//activate serial, then activate clock
 3ae:	82 e2       	ldi	r24, 0x22	; 34
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	22 e2       	ldi	r18, 0x22	; 34
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <FRGB>
 3ba:	49 81       	ldd	r20, Y+1	; 0x01
 3bc:	45 23       	and	r20, r21
 3be:	44 23       	and	r20, r20
 3c0:	11 f0       	breq	.+4      	; 0x3c6 <_Z9Display2Yh+0x24>
 3c2:	42 ef       	ldi	r20, 0xF2	; 242
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <_Z9Display2Yh+0x26>
 3c6:	40 ef       	ldi	r20, 0xF0	; 240
 3c8:	f9 01       	movw	r30, r18
 3ca:	40 83       	st	Z, r20
 3cc:	24 2f       	mov	r18, r20
 3ce:	21 60       	ori	r18, 0x01	; 1
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
	
}
 3d4:	00 00       	nop
 3d6:	0f 90       	pop	r0
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <_Z8Display3v>:

//__attribute__((optimize("unroll-loops")))
inline void Display3()
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
	//Last bit of register done first
	PORTA = CLK;
 3e6:	82 e2       	ldi	r24, 0x22	; 34
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
	
	Display2Y(4);
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	d7 df       	rcall	.-82     	; 0x3a2 <_Z9Display2Yh>
	Display2Y(2);
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	d5 df       	rcall	.-86     	; 0x3a2 <_Z9Display2Yh>
	Display2Y(1);
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	d3 df       	rcall	.-90     	; 0x3a2 <_Z9Display2Yh>
	Display2Y(4);
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	d1 df       	rcall	.-94     	; 0x3a2 <_Z9Display2Yh>
	Display2Y(2);
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	cf df       	rcall	.-98     	; 0x3a2 <_Z9Display2Yh>
	Display2Y(1);
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	cd df       	rcall	.-102    	; 0x3a2 <_Z9Display2Yh>
	Display2Y(4);
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	cb df       	rcall	.-106    	; 0x3a2 <_Z9Display2Yh>
	Display2Y(2);
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	c9 df       	rcall	.-110    	; 0x3a2 <_Z9Display2Yh>
	Display2Y(1);
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	c7 df       	rcall	.-114    	; 0x3a2 <_Z9Display2Yh>
	Display2Y(4);
 414:	84 e0       	ldi	r24, 0x04	; 4
 416:	c5 df       	rcall	.-118    	; 0x3a2 <_Z9Display2Yh>
	Display2Y(2);
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	c3 df       	rcall	.-122    	; 0x3a2 <_Z9Display2Yh>
	Display2Y(1);
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	c1 df       	rcall	.-126    	; 0x3a2 <_Z9Display2Yh>
	Display2Y(4);
 420:	84 e0       	ldi	r24, 0x04	; 4
 422:	bf df       	rcall	.-130    	; 0x3a2 <_Z9Display2Yh>
	Display2Y(2);
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	bd df       	rcall	.-134    	; 0x3a2 <_Z9Display2Yh>
	Display2Y(1);
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	bb df       	rcall	.-138    	; 0x3a2 <_Z9Display2Yh>
		
	PORTA = COLS | NLA | NEN;
 42c:	82 e2       	ldi	r24, 0x22	; 34
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	2c ef       	ldi	r18, 0xFC	; 252
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
	PORTA = 0;
 436:	82 e2       	ldi	r24, 0x22	; 34
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	fc 01       	movw	r30, r24
 43c:	10 82       	st	Z, r1
}
 43e:	00 00       	nop
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <_Z10UpdateRGB3v>:

//individual colours
__attribute__((optimize("unroll-loops")))
inline void UpdateRGB3()
{
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	1f 92       	push	r1
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
	for (u8 xy = 0; xy < WIDTH * HEIGHT; xy++)
 454:	19 82       	std	Y+1, r1	; 0x01
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	84 31       	cpi	r24, 0x14	; 20
 45a:	08 f0       	brcs	.+2      	; 0x45e <_Z10UpdateRGB3v+0x18>
 45c:	7c c0       	rjmp	.+248    	; 0x556 <_Z10UpdateRGB3v+0x110>
	{
		//if (LEDS[0][xy] - LEDTarget[0][xy] > 0) { LEDS[0][xy] -= 1; }
		//else if (LEDS[0][xy] - LEDTarget[0][xy] < 0) { LEDS[0][xy] += 1; }
		LEDS[0][xy] += (LEDS[0][xy] - LEDTarget[0][xy] > 0 ? -1 : 1);
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	88 2f       	mov	r24, r24
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	29 81       	ldd	r18, Y+1	; 0x01
 466:	22 2f       	mov	r18, r18
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	2b 5b       	subi	r18, 0xBB	; 187
 46c:	3e 4f       	sbci	r19, 0xFE	; 254
 46e:	f9 01       	movw	r30, r18
 470:	60 81       	ld	r22, Z
 472:	29 81       	ldd	r18, Y+1	; 0x01
 474:	22 2f       	mov	r18, r18
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	2b 5b       	subi	r18, 0xBB	; 187
 47a:	3e 4f       	sbci	r19, 0xFE	; 254
 47c:	f9 01       	movw	r30, r18
 47e:	20 81       	ld	r18, Z
 480:	42 2f       	mov	r20, r18
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	29 81       	ldd	r18, Y+1	; 0x01
 486:	22 2f       	mov	r18, r18
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	27 5a       	subi	r18, 0xA7	; 167
 48c:	3e 4f       	sbci	r19, 0xFE	; 254
 48e:	f9 01       	movw	r30, r18
 490:	20 81       	ld	r18, Z
 492:	22 2f       	mov	r18, r18
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	fa 01       	movw	r30, r20
 498:	e2 1b       	sub	r30, r18
 49a:	f3 0b       	sbc	r31, r19
 49c:	9f 01       	movw	r18, r30
 49e:	12 16       	cp	r1, r18
 4a0:	13 06       	cpc	r1, r19
 4a2:	14 f4       	brge	.+4      	; 0x4a8 <_Z10UpdateRGB3v+0x62>
 4a4:	2f ef       	ldi	r18, 0xFF	; 255
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <_Z10UpdateRGB3v+0x64>
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	26 0f       	add	r18, r22
 4ac:	8b 5b       	subi	r24, 0xBB	; 187
 4ae:	9e 4f       	sbci	r25, 0xFE	; 254
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
		
		LED[0][xy][0] = ValueToR(LEDS[0][xy]); LED[0][xy][1] = ValueToG(LEDS[0][xy]); LED[0][xy][2] = ValueToB(LEDS[0][xy]);
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	08 2f       	mov	r16, r24
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	8b 5b       	subi	r24, 0xBB	; 187
 4c2:	9e 4f       	sbci	r25, 0xFE	; 254
 4c4:	fc 01       	movw	r30, r24
 4c6:	80 81       	ld	r24, Z
 4c8:	20 de       	rcall	.-960    	; 0x10a <_Z8ValueToRh>
 4ca:	28 2f       	mov	r18, r24
 4cc:	c8 01       	movw	r24, r16
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	80 0f       	add	r24, r16
 4d4:	91 1f       	adc	r25, r17
 4d6:	87 5f       	subi	r24, 0xF7	; 247
 4d8:	9e 4f       	sbci	r25, 0xFE	; 254
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	08 2f       	mov	r16, r24
 4e2:	10 e0       	ldi	r17, 0x00	; 0
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	88 2f       	mov	r24, r24
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	8b 5b       	subi	r24, 0xBB	; 187
 4ec:	9e 4f       	sbci	r25, 0xFE	; 254
 4ee:	fc 01       	movw	r30, r24
 4f0:	80 81       	ld	r24, Z
 4f2:	2a de       	rcall	.-940    	; 0x148 <_Z8ValueToGh>
 4f4:	28 2f       	mov	r18, r24
 4f6:	c8 01       	movw	r24, r16
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	80 0f       	add	r24, r16
 4fe:	91 1f       	adc	r25, r17
 500:	86 5f       	subi	r24, 0xF6	; 246
 502:	9e 4f       	sbci	r25, 0xFE	; 254
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	08 2f       	mov	r16, r24
 50c:	10 e0       	ldi	r17, 0x00	; 0
 50e:	89 81       	ldd	r24, Y+1	; 0x01
 510:	88 2f       	mov	r24, r24
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	8b 5b       	subi	r24, 0xBB	; 187
 516:	9e 4f       	sbci	r25, 0xFE	; 254
 518:	fc 01       	movw	r30, r24
 51a:	80 81       	ld	r24, Z
 51c:	34 de       	rcall	.-920    	; 0x186 <_Z8ValueToBh>
 51e:	28 2f       	mov	r18, r24
 520:	c8 01       	movw	r24, r16
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	80 0f       	add	r24, r16
 528:	91 1f       	adc	r25, r17
 52a:	85 5f       	subi	r24, 0xF5	; 245
 52c:	9e 4f       	sbci	r25, 0xFE	; 254
 52e:	fc 01       	movw	r30, r24
 530:	20 83       	st	Z, r18
	
		if (!Timer)
 532:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 536:	88 23       	and	r24, r24
 538:	51 f4       	brne	.+20     	; 0x54e <_Z10UpdateRGB3v+0x108>
		{
			LEDTarget[0][xy] = Rand() % 256;
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	08 2f       	mov	r16, r24
 53e:	10 e0       	ldi	r17, 0x00	; 0
 540:	95 dd       	rcall	.-1238   	; 0x6c <_Z4Randv>
 542:	28 2f       	mov	r18, r24
 544:	c8 01       	movw	r24, r16
 546:	87 5a       	subi	r24, 0xA7	; 167
 548:	9e 4f       	sbci	r25, 0xFE	; 254
 54a:	fc 01       	movw	r30, r24
 54c:	20 83       	st	Z, r18

//individual colours
__attribute__((optimize("unroll-loops")))
inline void UpdateRGB3()
{
	for (u8 xy = 0; xy < WIDTH * HEIGHT; xy++)
 54e:	89 81       	ldd	r24, Y+1	; 0x01
 550:	8f 5f       	subi	r24, 0xFF	; 255
 552:	89 83       	std	Y+1, r24	; 0x01
 554:	80 cf       	rjmp	.-256    	; 0x456 <_Z10UpdateRGB3v+0x10>
		if (!Timer)
		{
			LEDTarget[0][xy] = Rand() % 256;
		}
	}
	Timer++;
 556:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 55a:	8f 5f       	subi	r24, 0xFF	; 255
 55c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 560:	00 00       	nop
 562:	0f 90       	pop	r0
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	08 95       	ret

0000056e <_Z10UpdateRGB4v>:

//All 1 colour
__attribute__((optimize("unroll-loops")))
inline void UpdateRGB4()
{
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	1f 92       	push	r1
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
	/*if (!Timer)
	{
		Target = Rand() % 256;
	}*/
	Target = (!Timer ? (Rand() % 256) : Target);
 578:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 57c:	88 23       	and	r24, r24
 57e:	11 f4       	brne	.+4      	; 0x584 <_Z10UpdateRGB4v+0x16>
 580:	75 dd       	rcall	.-1302   	; 0x6c <_Z4Randv>
 582:	02 c0       	rjmp	.+4      	; 0x588 <_Z10UpdateRGB4v+0x1a>
 584:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <Target>
 588:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <Target>
	GRGB += (!(Timer % 4) ? (GRGB - Target > 0 ? -1 : 1) : 0);
 58c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 590:	88 2f       	mov	r24, r24
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	83 70       	andi	r24, 0x03	; 3
 596:	99 27       	eor	r25, r25
 598:	89 2b       	or	r24, r25
 59a:	99 f4       	brne	.+38     	; 0x5c2 <_Z10UpdateRGB4v+0x54>
 59c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <GRGB>
 5a0:	28 2f       	mov	r18, r24
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <Target>
 5a8:	88 2f       	mov	r24, r24
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	a9 01       	movw	r20, r18
 5ae:	48 1b       	sub	r20, r24
 5b0:	59 0b       	sbc	r21, r25
 5b2:	ca 01       	movw	r24, r20
 5b4:	18 16       	cp	r1, r24
 5b6:	19 06       	cpc	r1, r25
 5b8:	14 f4       	brge	.+4      	; 0x5be <_Z10UpdateRGB4v+0x50>
 5ba:	8f ef       	ldi	r24, 0xFF	; 255
 5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <_Z10UpdateRGB4v+0x56>
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <_Z10UpdateRGB4v+0x56>
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <GRGB>
 5c8:	89 0f       	add	r24, r25
 5ca:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <GRGB>
	LED[0][0][0] = ValueToR(GRGB); LED[0][0][1] = ValueToG(GRGB); LED[0][0][2] = ValueToB(GRGB);
 5ce:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <GRGB>
 5d2:	9b dd       	rcall	.-1226   	; 0x10a <_Z8ValueToRh>
 5d4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <LED>
 5d8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <GRGB>
 5dc:	b5 dd       	rcall	.-1174   	; 0x148 <_Z8ValueToGh>
 5de:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <LED+0x1>
 5e2:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <GRGB>
 5e6:	cf dd       	rcall	.-1122   	; 0x186 <_Z8ValueToBh>
 5e8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LED+0x2>
	for (u8 xy = 1; xy < WIDTH * HEIGHT; xy++)
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	89 83       	std	Y+1, r24	; 0x01
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
 5f2:	84 31       	cpi	r24, 0x14	; 20
 5f4:	70 f5       	brcc	.+92     	; 0x652 <_Z10UpdateRGB4v+0xe4>
	{
		//if (LEDS[0][xy] - LEDTarget[0][xy] > 0) { LEDS[0][xy] -= 1; }
		//else if (LEDS[0][xy] - LEDTarget[0][xy] < 0) { LEDS[0][xy] += 1; }
		//LEDS[0][xy] += (LEDS[0][xy] - LEDTarget[0][xy] > 0 ? -1 : 1);
		
		LED[0][xy][0] = LED[0][0][0];
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <LED>
 600:	c9 01       	movw	r24, r18
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	82 0f       	add	r24, r18
 608:	93 1f       	adc	r25, r19
 60a:	87 5f       	subi	r24, 0xF7	; 247
 60c:	9e 4f       	sbci	r25, 0xFE	; 254
 60e:	fc 01       	movw	r30, r24
 610:	40 83       	st	Z, r20
		LED[0][xy][1] = LED[0][0][1];
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <LED+0x1>
 61c:	c9 01       	movw	r24, r18
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	82 0f       	add	r24, r18
 624:	93 1f       	adc	r25, r19
 626:	86 5f       	subi	r24, 0xF6	; 246
 628:	9e 4f       	sbci	r25, 0xFE	; 254
 62a:	fc 01       	movw	r30, r24
 62c:	40 83       	st	Z, r20
		LED[0][xy][2] = LED[0][0][2];
 62e:	89 81       	ldd	r24, Y+1	; 0x01
 630:	28 2f       	mov	r18, r24
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <LED+0x2>
 638:	c9 01       	movw	r24, r18
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	82 0f       	add	r24, r18
 640:	93 1f       	adc	r25, r19
 642:	85 5f       	subi	r24, 0xF5	; 245
 644:	9e 4f       	sbci	r25, 0xFE	; 254
 646:	fc 01       	movw	r30, r24
 648:	40 83       	st	Z, r20
		Target = Rand() % 256;
	}*/
	Target = (!Timer ? (Rand() % 256) : Target);
	GRGB += (!(Timer % 4) ? (GRGB - Target > 0 ? -1 : 1) : 0);
	LED[0][0][0] = ValueToR(GRGB); LED[0][0][1] = ValueToG(GRGB); LED[0][0][2] = ValueToB(GRGB);
	for (u8 xy = 1; xy < WIDTH * HEIGHT; xy++)
 64a:	89 81       	ldd	r24, Y+1	; 0x01
 64c:	8f 5f       	subi	r24, 0xFF	; 255
 64e:	89 83       	std	Y+1, r24	; 0x01
 650:	cf cf       	rjmp	.-98     	; 0x5f0 <_Z10UpdateRGB4v+0x82>
		
		LED[0][xy][0] = LED[0][0][0];
		LED[0][xy][1] = LED[0][0][1];
		LED[0][xy][2] = LED[0][0][2];
	}
	Timer++;
 652:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 656:	8f 5f       	subi	r24, 0xFF	; 255
 658:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 65c:	00 00       	nop
 65e:	0f 90       	pop	r0
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	08 95       	ret

00000666 <_Z10UpdateRGB5v>:

//All Fast colour
//__attribute__((optimize("unroll-loops")))
inline void UpdateRGB5()
{
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	cd b7       	in	r28, 0x3d	; 61
 66c:	de b7       	in	r29, 0x3e	; 62
	if (!WTimer)
 66e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <WTimer>
 672:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <WTimer+0x1>
 676:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <WTimer+0x2>
 67a:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <WTimer+0x3>
 67e:	89 2b       	or	r24, r25
 680:	8a 2b       	or	r24, r26
 682:	8b 2b       	or	r24, r27
 684:	a1 f4       	brne	.+40     	; 0x6ae <_Z10UpdateRGB5v+0x48>
	{
		do { FRGB = (Rand() % 7) + 1; /*1-7 inclusive*/ } while (FRGB == FRGBL);
 686:	f2 dc       	rcall	.-1564   	; 0x6c <_Z4Randv>
 688:	27 e0       	ldi	r18, 0x07	; 7
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	b9 01       	movw	r22, r18
 68e:	36 d1       	rcall	.+620    	; 0x8fc <__udivmodhi4>
 690:	8f 5f       	subi	r24, 0xFF	; 255
 692:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <FRGB>
 696:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <FRGB>
 69a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FRGBL>
 69e:	98 17       	cp	r25, r24
 6a0:	09 f4       	brne	.+2      	; 0x6a4 <_Z10UpdateRGB5v+0x3e>
 6a2:	f1 cf       	rjmp	.-30     	; 0x686 <_Z10UpdateRGB5v+0x20>
		FRGBL = FRGB;
 6a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <FRGB>
 6a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <FRGBL>
		
		Display3();
 6ac:	98 de       	rcall	.-720    	; 0x3de <_Z8Display3v>
	}
	WTimer = (WTimer < 100000 ? WTimer + 1 : 0);
 6ae:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <WTimer>
 6b2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <WTimer+0x1>
 6b6:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <WTimer+0x2>
 6ba:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <WTimer+0x3>
 6be:	80 3a       	cpi	r24, 0xA0	; 160
 6c0:	96 48       	sbci	r25, 0x86	; 134
 6c2:	a1 40       	sbci	r26, 0x01	; 1
 6c4:	b1 05       	cpc	r27, r1
 6c6:	60 f4       	brcc	.+24     	; 0x6e0 <_Z10UpdateRGB5v+0x7a>
 6c8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <WTimer>
 6cc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <WTimer+0x1>
 6d0:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <WTimer+0x2>
 6d4:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <WTimer+0x3>
 6d8:	01 96       	adiw	r24, 0x01	; 1
 6da:	a1 1d       	adc	r26, r1
 6dc:	b1 1d       	adc	r27, r1
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <_Z10UpdateRGB5v+0x80>
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	dc 01       	movw	r26, r24
 6e6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <WTimer>
 6ea:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <WTimer+0x1>
 6ee:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <WTimer+0x2>
 6f2:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <WTimer+0x3>
}
 6f6:	00 00       	nop
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret

000006fe <_Z8SetTimerv>:

inline void SetTimer()
{
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
	//cli();

	// Compare Match Interrupt Enable for Timer1
	TIMSK0 |= (1<<OCIE0A);
 706:	8e e6       	ldi	r24, 0x6E	; 110
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	2e e6       	ldi	r18, 0x6E	; 110
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	f9 01       	movw	r30, r18
 710:	20 81       	ld	r18, Z
 712:	22 60       	ori	r18, 0x02	; 2
 714:	fc 01       	movw	r30, r24
 716:	20 83       	st	Z, r18
	// set timer1 counter initial value to 0
	TCNT0 = 0x00;
 718:	86 e4       	ldi	r24, 0x46	; 70
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	fc 01       	movw	r30, r24
 71e:	10 82       	st	Z, r1
	// lets turn on 16 bit timer1 also
	TCCR0B |= (1 << CS02) | (0 << CS01) | (0 << CS00);
 720:	85 e4       	ldi	r24, 0x45	; 69
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	25 e4       	ldi	r18, 0x45	; 69
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	f9 01       	movw	r30, r18
 72a:	20 81       	ld	r18, Z
 72c:	24 60       	ori	r18, 0x04	; 4
 72e:	fc 01       	movw	r30, r24
 730:	20 83       	st	Z, r18
	//set compare register
	OCR0A = 0x7D;
 732:	87 e4       	ldi	r24, 0x47	; 71
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	2d e7       	ldi	r18, 0x7D	; 125
 738:	fc 01       	movw	r30, r24
 73a:	20 83       	st	Z, r18


	// enable interrupts
	//sei();
}
 73c:	00 00       	nop
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	08 95       	ret

00000744 <__vector_12>:

ISR(TIMER0_COMPA_vect) // timer compare interrupt service routine
{
 744:	1f 92       	push	r1
 746:	0f 92       	push	r0
 748:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 74c:	0f 92       	push	r0
 74e:	11 24       	eor	r1, r1
 750:	8f 93       	push	r24
 752:	9f 93       	push	r25
 754:	ef 93       	push	r30
 756:	ff 93       	push	r31
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	cd b7       	in	r28, 0x3d	; 61
 75e:	de b7       	in	r29, 0x3e	; 62
	TIMSK0 = TIMSK0 & !(1<<OCIE0A);
 760:	8e e6       	ldi	r24, 0x6E	; 110
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	fc 01       	movw	r30, r24
 766:	80 81       	ld	r24, Z
 768:	8e e6       	ldi	r24, 0x6E	; 110
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	fc 01       	movw	r30, r24
 76e:	10 82       	st	Z, r1
	ModeEnable = 0;
 770:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <ModeEnable>
	//DoWait = false;
	//Timer++;
	//PORTB = ~PORTB;
}
 774:	00 00       	nop
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	ff 91       	pop	r31
 77c:	ef 91       	pop	r30
 77e:	9f 91       	pop	r25
 780:	8f 91       	pop	r24
 782:	0f 90       	pop	r0
 784:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 788:	0f 90       	pop	r0
 78a:	1f 90       	pop	r1
 78c:	18 95       	reti

0000078e <__vector_5>:

ISR(PCINT2_vect)
{
 78e:	1f 92       	push	r1
 790:	0f 92       	push	r0
 792:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 796:	0f 92       	push	r0
 798:	11 24       	eor	r1, r1
 79a:	2f 93       	push	r18
 79c:	3f 93       	push	r19
 79e:	4f 93       	push	r20
 7a0:	5f 93       	push	r21
 7a2:	6f 93       	push	r22
 7a4:	7f 93       	push	r23
 7a6:	8f 93       	push	r24
 7a8:	9f 93       	push	r25
 7aa:	af 93       	push	r26
 7ac:	bf 93       	push	r27
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	cd b7       	in	r28, 0x3d	; 61
 7b8:	de b7       	in	r29, 0x3e	; 62
	if (ModeEnable == 2) { SetTimer(); }
 7ba:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <ModeEnable>
 7be:	82 30       	cpi	r24, 0x02	; 2
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <__vector_5+0x36>
 7c2:	9d df       	rcall	.-198    	; 0x6fe <_Z8SetTimerv>
	
	if ((PINC & 0x80) && (ModeEnable == 0)) { ModeEnable = 1; }
 7c4:	88 e2       	ldi	r24, 0x28	; 40
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	fc 01       	movw	r30, r24
 7ca:	80 81       	ld	r24, Z
 7cc:	88 23       	and	r24, r24
 7ce:	34 f4       	brge	.+12     	; 0x7dc <__vector_5+0x4e>
 7d0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <ModeEnable>
 7d4:	88 23       	and	r24, r24
 7d6:	11 f4       	brne	.+4      	; 0x7dc <__vector_5+0x4e>
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	01 c0       	rjmp	.+2      	; 0x7de <__vector_5+0x50>
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	88 23       	and	r24, r24
 7e0:	19 f0       	breq	.+6      	; 0x7e8 <__vector_5+0x5a>
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <ModeEnable>
	//ModeSwitch = (ModeSwitch ? ModeSwitch : 1);
}
 7e8:	00 00       	nop
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	ff 91       	pop	r31
 7f0:	ef 91       	pop	r30
 7f2:	bf 91       	pop	r27
 7f4:	af 91       	pop	r26
 7f6:	9f 91       	pop	r25
 7f8:	8f 91       	pop	r24
 7fa:	7f 91       	pop	r23
 7fc:	6f 91       	pop	r22
 7fe:	5f 91       	pop	r21
 800:	4f 91       	pop	r20
 802:	3f 91       	pop	r19
 804:	2f 91       	pop	r18
 806:	0f 90       	pop	r0
 808:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 80c:	0f 90       	pop	r0
 80e:	1f 90       	pop	r1
 810:	18 95       	reti

00000812 <main>:


int main()
{
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	cd b7       	in	r28, 0x3d	; 61
 818:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
 81a:	81 e2       	ldi	r24, 0x21	; 33
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	2f ef       	ldi	r18, 0xFF	; 255
 820:	fc 01       	movw	r30, r24
 822:	20 83       	st	Z, r18
	DDRB = 0xFF;//Last pin is input
 824:	85 e2       	ldi	r24, 0x25	; 37
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	2f ef       	ldi	r18, 0xFF	; 255
 82a:	fc 01       	movw	r30, r24
 82c:	20 83       	st	Z, r18
	DDRC = 0x7F;
 82e:	89 e2       	ldi	r24, 0x29	; 41
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	2f e7       	ldi	r18, 0x7F	; 127
 834:	fc 01       	movw	r30, r24
 836:	20 83       	st	Z, r18
	
	PORTA = COLS;
 838:	82 e2       	ldi	r24, 0x22	; 34
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	20 ef       	ldi	r18, 0xF0	; 240
 83e:	fc 01       	movw	r30, r24
 840:	20 83       	st	Z, r18
	PORTB = 0x00;
 842:	86 e2       	ldi	r24, 0x26	; 38
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	fc 01       	movw	r30, r24
 848:	10 82       	st	Z, r1
	PORTC = 0x20;
 84a:	8a e2       	ldi	r24, 0x2A	; 42
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	20 e2       	ldi	r18, 0x20	; 32
 850:	fc 01       	movw	r30, r24
 852:	20 83       	st	Z, r18
	
	PCMSK2 |= (1 << PCINT23);
 854:	8d e6       	ldi	r24, 0x6D	; 109
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	2d e6       	ldi	r18, 0x6D	; 109
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	f9 01       	movw	r30, r18
 85e:	20 81       	ld	r18, Z
 860:	20 68       	ori	r18, 0x80	; 128
 862:	fc 01       	movw	r30, r24
 864:	20 83       	st	Z, r18
	PCICR |= (1 << PCIE2);
 866:	88 e6       	ldi	r24, 0x68	; 104
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	28 e6       	ldi	r18, 0x68	; 104
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	f9 01       	movw	r30, r18
 870:	20 81       	ld	r18, Z
 872:	24 60       	ori	r18, 0x04	; 4
 874:	fc 01       	movw	r30, r24
 876:	20 83       	st	Z, r18
	sei();
 878:	78 94       	sei
			UpdateRGB5();
			//Wait();
		}*/
		
		
		switch (Mode)
 87a:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <Mode>
 87e:	88 2f       	mov	r24, r24
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	81 30       	cpi	r24, 0x01	; 1
 884:	91 05       	cpc	r25, r1
 886:	61 f0       	breq	.+24     	; 0x8a0 <main+0x8e>
 888:	82 30       	cpi	r24, 0x02	; 2
 88a:	91 05       	cpc	r25, r1
 88c:	81 f0       	breq	.+32     	; 0x8ae <main+0x9c>
 88e:	89 2b       	or	r24, r25
 890:	a9 f4       	brne	.+42     	; 0x8bc <main+0xaa>
		{
		case 0:
			while(ModeEnable != 1)
 892:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <ModeEnable>
 896:	81 30       	cpi	r24, 0x01	; 1
 898:	19 f0       	breq	.+6      	; 0x8a0 <main+0x8e>
			{
				UpdateRGB4();
 89a:	69 de       	rcall	.-814    	; 0x56e <_Z10UpdateRGB4v>
				Display2();
 89c:	5b dd       	rcall	.-1354   	; 0x354 <_Z8Display2v>
		
		
		switch (Mode)
		{
		case 0:
			while(ModeEnable != 1)
 89e:	f9 cf       	rjmp	.-14     	; 0x892 <main+0x80>
			{
				UpdateRGB4();
				Display2();
			}
		case 1:
			while(ModeEnable != 1)
 8a0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <ModeEnable>
 8a4:	81 30       	cpi	r24, 0x01	; 1
 8a6:	49 f0       	breq	.+18     	; 0x8ba <main+0xa8>
			{
				UpdateRGB3();
 8a8:	ce dd       	rcall	.-1124   	; 0x446 <_Z10UpdateRGB3v>
				Display2();
 8aa:	54 dd       	rcall	.-1368   	; 0x354 <_Z8Display2v>
			{
				UpdateRGB4();
				Display2();
			}
		case 1:
			while(ModeEnable != 1)
 8ac:	f9 cf       	rjmp	.-14     	; 0x8a0 <main+0x8e>
				UpdateRGB3();
				Display2();
			}
			break;
		case 2:
			while(ModeEnable != 1)
 8ae:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <ModeEnable>
 8b2:	81 30       	cpi	r24, 0x01	; 1
 8b4:	19 f0       	breq	.+6      	; 0x8bc <main+0xaa>
			{
				UpdateRGB5();
 8b6:	d7 de       	rcall	.-594    	; 0x666 <_Z10UpdateRGB5v>
				UpdateRGB3();
				Display2();
			}
			break;
		case 2:
			while(ModeEnable != 1)
 8b8:	fa cf       	rjmp	.-12     	; 0x8ae <main+0x9c>
			while(ModeEnable != 1)
			{
				UpdateRGB3();
				Display2();
			}
			break;
 8ba:	00 00       	nop
			{
				UpdateRGB5();
			}
		}
		
		if (ModeEnable == 1)
 8bc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <ModeEnable>
 8c0:	81 30       	cpi	r24, 0x01	; 1
 8c2:	d9 f6       	brne	.-74     	; 0x87a <main+0x68>
		{
			Mode = (Mode + 1 > 2 ? 0 : Mode + 1); ModeEnable = 2;
 8c4:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <Mode>
 8c8:	88 2f       	mov	r24, r24
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	01 96       	adiw	r24, 0x01	; 1
 8ce:	03 97       	sbiw	r24, 0x03	; 3
 8d0:	24 f4       	brge	.+8      	; 0x8da <main+0xc8>
 8d2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <Mode>
 8d6:	8f 5f       	subi	r24, 0xFF	; 255
 8d8:	01 c0       	rjmp	.+2      	; 0x8dc <main+0xca>
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <Mode>
 8e0:	82 e0       	ldi	r24, 0x02	; 2
 8e2:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <ModeEnable>
			Timer = 0; WTimer = 0;
 8e6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 8ea:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <WTimer>
 8ee:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <WTimer+0x1>
 8f2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <WTimer+0x2>
 8f6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <WTimer+0x3>
	
	PCMSK2 |= (1 << PCINT23);
	PCICR |= (1 << PCIE2);
	sei();
	
	while(1)
 8fa:	bf cf       	rjmp	.-130    	; 0x87a <main+0x68>

000008fc <__udivmodhi4>:
 8fc:	aa 1b       	sub	r26, r26
 8fe:	bb 1b       	sub	r27, r27
 900:	51 e1       	ldi	r21, 0x11	; 17
 902:	07 c0       	rjmp	.+14     	; 0x912 <__udivmodhi4_ep>

00000904 <__udivmodhi4_loop>:
 904:	aa 1f       	adc	r26, r26
 906:	bb 1f       	adc	r27, r27
 908:	a6 17       	cp	r26, r22
 90a:	b7 07       	cpc	r27, r23
 90c:	10 f0       	brcs	.+4      	; 0x912 <__udivmodhi4_ep>
 90e:	a6 1b       	sub	r26, r22
 910:	b7 0b       	sbc	r27, r23

00000912 <__udivmodhi4_ep>:
 912:	88 1f       	adc	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	5a 95       	dec	r21
 918:	a9 f7       	brne	.-22     	; 0x904 <__udivmodhi4_loop>
 91a:	80 95       	com	r24
 91c:	90 95       	com	r25
 91e:	bc 01       	movw	r22, r24
 920:	cd 01       	movw	r24, r26
 922:	08 95       	ret

00000924 <_exit>:
 924:	f8 94       	cli

00000926 <__stop_program>:
 926:	ff cf       	rjmp	.-2      	; 0x926 <__stop_program>
